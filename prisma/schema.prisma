generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  clerkId   String    @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relations
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower") // users this user follows

  @@map("user")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId    String   @db.ObjectId
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@map("post")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId]) // composite index for faster queries
  @@map("like")
}

model Follows {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId]) // Composite index for faster queries
  @@map("follow")
}
